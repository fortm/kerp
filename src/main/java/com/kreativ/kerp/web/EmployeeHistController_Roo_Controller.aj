// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.kreativ.kerp.web;

import com.kreativ.kerp.domain.Employee;
import com.kreativ.kerp.domain.Project;
import com.kreativ.kerp.domain.hist.EmployeeHist;
import com.kreativ.kerp.reference.Months;
import com.kreativ.kerp.reference.Mst_job_role;
import com.kreativ.kerp.reference.WorkArea;
import java.io.UnsupportedEncodingException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect EmployeeHistController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST)
    public String EmployeeHistController.create(@Valid EmployeeHist employeeHist, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("employeeHist", employeeHist);
            return "employeehists/create";
        }
        uiModel.asMap().clear();
        employeeHist.persist();
        return "redirect:/employeehists/" + encodeUrlPathSegment(employeeHist.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String EmployeeHistController.createForm(Model uiModel) {
        uiModel.addAttribute("employeeHist", new EmployeeHist());
        List dependencies = new ArrayList();
        if (Employee.countEmployees() == 0) {
            dependencies.add(new String[]{"employee", "employees"});
        }
        if (Project.countProjects() == 0) {
            dependencies.add(new String[]{"project", "projects"});
        }
        if (Mst_job_role.countMst_job_roles() == 0) {
            dependencies.add(new String[]{"mst_job_role", "mst_job_roles"});
        }
        uiModel.addAttribute("dependencies", dependencies);
        return "employeehists/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String EmployeeHistController.show(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("employeehist", EmployeeHist.findEmployeeHist(id));
        uiModel.addAttribute("itemId", id);
        return "employeehists/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String EmployeeHistController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            uiModel.addAttribute("employeehists", EmployeeHist.findEmployeeHistEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) EmployeeHist.countEmployeeHists() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("employeehists", EmployeeHist.findAllEmployeeHists());
        }
        return "employeehists/list";
    }
    
    @ModelAttribute("employees")
    public Collection<Employee> EmployeeHistController.populateEmployees() {
        return Employee.findAllEmployees();
    }
    
    @ModelAttribute("projects")
    public Collection<Project> EmployeeHistController.populateProjects() {
        return Project.findAllProjects();
    }
    
    @ModelAttribute("employeehists")
    public Collection<EmployeeHist> EmployeeHistController.populateEmployeeHists() {
        return EmployeeHist.findAllEmployeeHists();
    }
    
    @ModelAttribute("monthses")
    public Collection<Months> EmployeeHistController.populateMonthses() {
        return Arrays.asList(Months.class.getEnumConstants());
    }
    
    @ModelAttribute("mst_job_roles")
    public Collection<Mst_job_role> EmployeeHistController.populateMst_job_roles() {
        return Mst_job_role.findAllMst_job_roles();
    }
    
    @ModelAttribute("workareas")
    public Collection<WorkArea> EmployeeHistController.populateWorkAreas() {
        return Arrays.asList(WorkArea.class.getEnumConstants());
    }
    
    String EmployeeHistController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
