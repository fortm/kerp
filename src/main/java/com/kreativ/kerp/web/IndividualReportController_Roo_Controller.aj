// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.kreativ.kerp.web;

import com.kreativ.kerp.domain.Employee;
import com.kreativ.kerp.domain.report.IndividualReport;
import com.kreativ.kerp.reference.IndividualReportOptions;
import com.kreativ.kerp.reference.Months;
import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import java.util.Arrays;
import java.util.Collection;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

privileged aspect IndividualReportController_Roo_Controller {
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String IndividualReportController.createForm(Model uiModel) {
        uiModel.addAttribute("individualReport", new IndividualReport());
        return "individualreports/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String IndividualReportController.show(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("individualreport", IndividualReport.findIndividualReport(id));
        uiModel.addAttribute("itemId", id);
        return "individualreports/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String IndividualReportController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            uiModel.addAttribute("individualreports", IndividualReport.findIndividualReportEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) IndividualReport.countIndividualReports() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("individualreports", IndividualReport.findAllIndividualReports());
        }
        return "individualreports/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String IndividualReportController.update(@Valid IndividualReport individualReport, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("individualReport", individualReport);
            return "individualreports/update";
        }
        uiModel.asMap().clear();
        individualReport.merge();
        return "redirect:/individualreports/" + encodeUrlPathSegment(individualReport.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String IndividualReportController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("individualReport", IndividualReport.findIndividualReport(id));
        return "individualreports/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String IndividualReportController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        IndividualReport.findIndividualReport(id).remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/individualreports";
    }
    
    @ModelAttribute("employees")
    public Collection<Employee> IndividualReportController.populateEmployees() {
        return Employee.findAllEmployees();
    }
    
    @ModelAttribute("individualreports")
    public Collection<IndividualReport> IndividualReportController.populateIndividualReports() {
        return IndividualReport.findAllIndividualReports();
    }
    
    @ModelAttribute("individualreportoptionses")
    public Collection<IndividualReportOptions> IndividualReportController.populateIndividualReportOptionses() {
        return Arrays.asList(IndividualReportOptions.class.getEnumConstants());
    }
    
    @ModelAttribute("monthses")
    public Collection<Months> IndividualReportController.populateMonthses() {
        return Arrays.asList(Months.class.getEnumConstants());
    }
    
}
