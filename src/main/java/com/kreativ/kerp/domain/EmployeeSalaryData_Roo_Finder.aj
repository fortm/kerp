// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.kreativ.kerp.domain;

import com.kreativ.kerp.domain.Employee;
import com.kreativ.kerp.domain.EmployeeSalaryData;
import com.kreativ.kerp.reference.Months;
import java.lang.Long;
import java.lang.String;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect EmployeeSalaryData_Roo_Finder {
    
    public static TypedQuery<EmployeeSalaryData> EmployeeSalaryData.findEmployeeSalaryDatasByEmployee(Employee employee) {
        if (employee == null) throw new IllegalArgumentException("The employee argument is required");
        EntityManager em = EmployeeSalaryData.entityManager();
        TypedQuery<EmployeeSalaryData> q = em.createQuery("SELECT o FROM EmployeeSalaryData AS o WHERE o.employee = :employee", EmployeeSalaryData.class);
        q.setParameter("employee", employee);
        return q;
    }
    
    public static TypedQuery<EmployeeSalaryData> EmployeeSalaryData.findEmployeeSalaryDatasByEmployeeAndYearAndMonth(Employee employee, String year, Months month) {
        if (employee == null) throw new IllegalArgumentException("The employee argument is required");
        if (year == null || year.length() == 0) throw new IllegalArgumentException("The year argument is required");
        if (month == null) throw new IllegalArgumentException("The month argument is required");
        EntityManager em = EmployeeSalaryData.entityManager();
        TypedQuery<EmployeeSalaryData> q = em.createQuery("SELECT o FROM EmployeeSalaryData AS o WHERE o.employee = :employee AND o.year = :year AND o.month = :month", EmployeeSalaryData.class);
        q.setParameter("employee", employee);
        q.setParameter("year", year);
        q.setParameter("month", month);
        return q;
    }
    
    public static TypedQuery<EmployeeSalaryData> EmployeeSalaryData.findEmployeeSalaryDatasById(Long id) {
        if (id == null) throw new IllegalArgumentException("The id argument is required");
        EntityManager em = EmployeeSalaryData.entityManager();
        TypedQuery<EmployeeSalaryData> q = em.createQuery("SELECT o FROM EmployeeSalaryData AS o WHERE o.id = :id", EmployeeSalaryData.class);
        q.setParameter("id", id);
        return q;
    }
    
}
