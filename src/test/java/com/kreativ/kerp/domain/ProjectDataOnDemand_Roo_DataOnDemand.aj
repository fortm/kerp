// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.kreativ.kerp.domain;

import com.kreativ.kerp.domain.EmployeeDataOnDemand;
import com.kreativ.kerp.domain.Project;
import java.util.List;
import java.util.Random;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ProjectDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ProjectDataOnDemand: @Component;
    
    private Random ProjectDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<Project> ProjectDataOnDemand.data;
    
    @Autowired
    private EmployeeDataOnDemand ProjectDataOnDemand.employeeDataOnDemand;
    
    public Project ProjectDataOnDemand.getNewTransientProject(int index) {
        com.kreativ.kerp.domain.Project obj = new com.kreativ.kerp.domain.Project();
        setProject_name(obj, index);
        setStart_date(obj, index);
        setSupervisor(obj, index);
        return obj;
    }
    
    public void ProjectDataOnDemand.setProject_name(Project obj, int index) {
        java.lang.String project_name = "project_name_" + index;
        obj.setProject_name(project_name);
    }
    
    public void ProjectDataOnDemand.setStart_date(Project obj, int index) {
        java.util.Date start_date = new java.util.GregorianCalendar(java.util.Calendar.getInstance().get(java.util.Calendar.YEAR), java.util.Calendar.getInstance().get(java.util.Calendar.MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.HOUR_OF_DAY), java.util.Calendar.getInstance().get(java.util.Calendar.MINUTE), java.util.Calendar.getInstance().get(java.util.Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setStart_date(start_date);
    }
    
    public void ProjectDataOnDemand.setSupervisor(Project obj, int index) {
        com.kreativ.kerp.domain.Employee supervisor = employeeDataOnDemand.getRandomEmployee();
        obj.setSupervisor(supervisor);
    }
    
    public Project ProjectDataOnDemand.getSpecificProject(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Project obj = data.get(index);
        return Project.findProject(obj.getProject_id());
    }
    
    public Project ProjectDataOnDemand.getRandomProject() {
        init();
        Project obj = data.get(rnd.nextInt(data.size()));
        return Project.findProject(obj.getProject_id());
    }
    
    public boolean ProjectDataOnDemand.modifyProject(Project obj) {
        return false;
    }
    
    public void ProjectDataOnDemand.init() {
        data = com.kreativ.kerp.domain.Project.findProjectEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Project' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<com.kreativ.kerp.domain.Project>();
        for (int i = 0; i < 10; i++) {
            com.kreativ.kerp.domain.Project obj = getNewTransientProject(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
