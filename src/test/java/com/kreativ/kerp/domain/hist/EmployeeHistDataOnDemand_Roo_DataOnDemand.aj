// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.kreativ.kerp.domain.hist;

import com.kreativ.kerp.domain.EmployeeDataOnDemand;
import com.kreativ.kerp.domain.ProjectDataOnDemand;
import com.kreativ.kerp.domain.hist.EmployeeHist;
import java.util.List;
import java.util.Random;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect EmployeeHistDataOnDemand_Roo_DataOnDemand {
    
    declare @type: EmployeeHistDataOnDemand: @Component;
    
    private Random EmployeeHistDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<EmployeeHist> EmployeeHistDataOnDemand.data;
    
    @Autowired
    private EmployeeDataOnDemand EmployeeHistDataOnDemand.employeeDataOnDemand;
    
    @Autowired
    private ProjectDataOnDemand EmployeeHistDataOnDemand.projectDataOnDemand;
    
    public EmployeeHist EmployeeHistDataOnDemand.getNewTransientEmployeeHist(int index) {
        com.kreativ.kerp.domain.hist.EmployeeHist obj = new com.kreativ.kerp.domain.hist.EmployeeHist();
        setEmployee(obj, index);
        setYear(obj, index);
        setMonth(obj, index);
        setWorkArea(obj, index);
        setProject(obj, index);
        setJob_role(obj, index);
        return obj;
    }
    
    public void EmployeeHistDataOnDemand.setEmployee(EmployeeHist obj, int index) {
        com.kreativ.kerp.domain.Employee employee = employeeDataOnDemand.getRandomEmployee();
        obj.setEmployee(employee);
    }
    
    public void EmployeeHistDataOnDemand.setYear(EmployeeHist obj, int index) {
        int year = index;
        obj.setYear(year);
    }
    
    public void EmployeeHistDataOnDemand.setMonth(EmployeeHist obj, int index) {
        com.kreativ.kerp.reference.Months month = null;
        obj.setMonth(month);
    }
    
    public void EmployeeHistDataOnDemand.setWorkArea(EmployeeHist obj, int index) {
        com.kreativ.kerp.reference.WorkArea workArea = com.kreativ.kerp.reference.WorkArea.class.getEnumConstants()[0];
        obj.setWorkArea(workArea);
    }
    
    public void EmployeeHistDataOnDemand.setProject(EmployeeHist obj, int index) {
        com.kreativ.kerp.domain.Project project = projectDataOnDemand.getRandomProject();
        obj.setProject(project);
    }
    
    public void EmployeeHistDataOnDemand.setJob_role(EmployeeHist obj, int index) {
        com.kreativ.kerp.reference.Mst_job_role job_role = null;
        obj.setJob_role(job_role);
    }
    
    public EmployeeHist EmployeeHistDataOnDemand.getSpecificEmployeeHist(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        EmployeeHist obj = data.get(index);
        return EmployeeHist.findEmployeeHist(obj.getId());
    }
    
    public EmployeeHist EmployeeHistDataOnDemand.getRandomEmployeeHist() {
        init();
        EmployeeHist obj = data.get(rnd.nextInt(data.size()));
        return EmployeeHist.findEmployeeHist(obj.getId());
    }
    
    public boolean EmployeeHistDataOnDemand.modifyEmployeeHist(EmployeeHist obj) {
        return false;
    }
    
    public void EmployeeHistDataOnDemand.init() {
        data = com.kreativ.kerp.domain.hist.EmployeeHist.findEmployeeHistEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'EmployeeHist' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<com.kreativ.kerp.domain.hist.EmployeeHist>();
        for (int i = 0; i < 10; i++) {
            com.kreativ.kerp.domain.hist.EmployeeHist obj = getNewTransientEmployeeHist(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
